package client;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import metier.Badge;
import metier.Lecteur;
import metier.BadgeService;
import metier.Batiment;
import metier.BatimentService;
import metier.Acces;
import metier.AccesService;
import metier.LecteurService;
import metier.MetierFactory;
import metier.Personne;
import metier.PersonneService;
import metier.Zone;
import metier.ZoneService;

public class Interface extends javax.swing.JFrame {

    private static BadgeService badgeSrv;
    private static PersonneService personneSrv;
    private static AccesService accesSrv;
    private static ZoneService zoneSrv;
    private static BatimentService batimentSrv;
    private static LecteurService lecteurSrv;
    private Personne personne;
    private final static Lecteur lecteurRFID = new Lecteur();
    private final static String PORT_COM = "COM5";
    private final static String LIGNE = "3E";

    /**
     * Creates new form Interface
     */
    public Interface() {
        badgeSrv = MetierFactory.getBadgeService();
        accesSrv = MetierFactory.getAccesService();
        personneSrv = MetierFactory.getPersonneService();
        zoneSrv = MetierFactory.getZoneService();
        batimentSrv = MetierFactory.getBatimentService();
        lecteurSrv = MetierFactory.getLecteurService();
        initComponents();
        try {
            MaskFormatter maskOuverture = new MaskFormatter("##:##:##");
            MaskFormatter maskFermeture = new MaskFormatter("##:##:##");
            MaskFormatter maskIp = new MaskFormatter("###.###.###.###");
            maskOuverture.setPlaceholderCharacter('0');
            maskFermeture.setPlaceholderCharacter('0');
            maskIp.setPlaceholderCharacter('0');
            maskOuverture.install(jFormattedTextFieldPanelAgencementOuverture);
            maskFermeture.install(jFormattedTextFieldPanelAgencementFermeture);
            maskIp.install(jFormattedTextFieldPanelAgencementIpLecteur);
        } catch (ParseException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            lecteurRFID.connect(PORT_COM);
        } catch (Exception ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        defaultPanelBadge();
        setContentPane(jPanelBadge);
        pack();
        jPanelBadge.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupHistorique = new javax.swing.ButtonGroup();
        buttonGroupZone = new javax.swing.ButtonGroup();
        jPanelBadge = new javax.swing.JPanel();
        jButtonPanelBadgeModifier = new javax.swing.JButton();
        jButtonPanelBadgeSupprimer = new javax.swing.JButton();
        jButtonPanelBadgeAjouter = new javax.swing.JButton();
        jTextFieldPanelBadgeNumero = new javax.swing.JTextField();
        jButtonPanelBadgeScannerBadge = new javax.swing.JButton();
        jLabelPanelBadgeNom = new javax.swing.JLabel();
        jLabelPanelBadgePrenom = new javax.swing.JLabel();
        jTextFieldPanelBadgeNom = new javax.swing.JTextField();
        jTextFieldPanelBadgePrenom = new javax.swing.JTextField();
        jPasswordFieldPanelBadgePassword = new javax.swing.JPasswordField();
        jLabelPanelBadgeNumero = new javax.swing.JLabel();
        jLabelPanelBadgePassword = new javax.swing.JLabel();
        jLabelPanelBadgeConfirmation = new javax.swing.JLabel();
        jPasswordFieldPanelBadgeConfirmation = new javax.swing.JPasswordField();
        jCheckBoxPanelBadgePassword = new javax.swing.JCheckBox();
        jButtonPanelBadgeObtenirPersonne = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListPanelBadgeZone = new javax.swing.JList();
        jLabelPanelBadgeZone = new javax.swing.JLabel();
        jComboBoxPanelBadgeBatiment = new javax.swing.JComboBox();
        jRadioButtonPanelBadgeZoneByBatiment = new javax.swing.JRadioButton();
        jRadioButtonPanelBadgeAllZoneByBatiment = new javax.swing.JRadioButton();
        jRadioButtonPanelBadgeAllZone = new javax.swing.JRadioButton();
        jButtonAjouterPanelBadgeZone = new javax.swing.JButton();
        jComboBoxPanelBadgeZone = new javax.swing.JComboBox();
        jPanelHistorique = new javax.swing.JPanel();
        jRadioButtonPanelHistoriqueZone = new javax.swing.JRadioButton();
        jRadioButtonPanelHistoriqueBadge = new javax.swing.JRadioButton();
        jComboBoxPanelHistorique = new javax.swing.JComboBox();
        jScrollPaneBadge = new javax.swing.JScrollPane();
        jTablePanelHistorique = new javax.swing.JTable();
        jButtonPanelHistoriqueScannerBadge = new javax.swing.JButton();
        jPanelAgencement = new javax.swing.JPanel();
        jComboBoxPanelAgencementBatiment = new javax.swing.JComboBox();
        jTextFieldPanelAgencementNomBatiment = new javax.swing.JTextField();
        jComboBoxPanelAgencementZone = new javax.swing.JComboBox();
        jTextFieldPanelAgencementNomZone = new javax.swing.JTextField();
        jCheckBoxPanelAgencementZoneSensible = new javax.swing.JCheckBox();
        jFormattedTextFieldPanelAgencementOuverture = new javax.swing.JFormattedTextField();
        jFormattedTextFieldPanelAgencementFermeture = new javax.swing.JFormattedTextField();
        jComboBoxPanelAgencementLecteur = new javax.swing.JComboBox();
        jSeparatorPanelAgencementZone = new javax.swing.JSeparator();
        jSeparatorPanelAgencementLecteur = new javax.swing.JSeparator();
        jButtonPanelAgencementValider = new javax.swing.JButton();
        jLabelPanelAgencementBatiment = new javax.swing.JLabel();
        jLabelPanelAgencementZone = new javax.swing.JLabel();
        jLabelPanelAgencementNomBatiment = new javax.swing.JLabel();
        jLabelPanelAgencementZoneSensible = new javax.swing.JLabel();
        jLabelPanelAgencementNomZone = new javax.swing.JLabel();
        jLabelPanelAgencementFermeture = new javax.swing.JLabel();
        jLabelPanelAgencementOuverture = new javax.swing.JLabel();
        jLabelPanelAgencementLecteur = new javax.swing.JLabel();
        jLabelPanelAgencementIpLecteur = new javax.swing.JLabel();
        jComboBoxPanelAgencementChoix = new javax.swing.JComboBox();
        jFormattedTextFieldPanelAgencementIpLecteur = new javax.swing.JFormattedTextField();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu = new javax.swing.JMenu();
        jMenuItemBadge = new javax.swing.JMenuItem();
        jMenuItemHistorique = new javax.swing.JMenuItem();
        jMenuItemBatiment = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1, 1));
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanelBadge.setToolTipText("");
        jPanelBadge.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButtonPanelBadgeModifier.setText("Modifier");
        jButtonPanelBadgeModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPanelBadgeModifierActionPerformed(evt);
            }
        });

        jButtonPanelBadgeSupprimer.setText("Supprimer");
        jButtonPanelBadgeSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPanelBadgeSupprimerActionPerformed(evt);
            }
        });

        jButtonPanelBadgeAjouter.setText("Ajouter");
        jButtonPanelBadgeAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPanelBadgeAjouterActionPerformed(evt);
            }
        });

        jButtonPanelBadgeScannerBadge.setText("Scanner le badge");
        jButtonPanelBadgeScannerBadge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPanelBadgeScannerBadgeActionPerformed(evt);
            }
        });

        jLabelPanelBadgeNom.setText("Nom");

        jLabelPanelBadgePrenom.setText("Prenom");

        jLabelPanelBadgeNumero.setText("Num√©ro");

        jLabelPanelBadgePassword.setText("Mot de passe");

        jLabelPanelBadgeConfirmation.setText("Confirmation");

        jCheckBoxPanelBadgePassword.setText("Ne pas changer");
        jCheckBoxPanelBadgePassword.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPanelBadgePasswordItemStateChanged(evt);
            }
        });

        jButtonPanelBadgeObtenirPersonne.setText("Chercher");
        jButtonPanelBadgeObtenirPersonne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPanelBadgeObtenirPersonneActionPerformed(evt);
            }
        });

        jListPanelBadgeZone.setModel(new javax.swing.DefaultListModel());
        jListPanelBadgeZone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListPanelBadgeZoneMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListPanelBadgeZone);

        jLabelPanelBadgeZone.setText("Zone(s)");

        jComboBoxPanelBadgeBatiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPanelBadgeBatimentActionPerformed(evt);
            }
        });

        buttonGroupZone.add(jRadioButtonPanelBadgeZoneByBatiment);
        jRadioButtonPanelBadgeZoneByBatiment.setSelected(true);
        jRadioButtonPanelBadgeZoneByBatiment.setText("Zone sp√©cifique");
        jRadioButtonPanelBadgeZoneByBatiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPanelBadgeZoneByBatimentActionPerformed(evt);
            }
        });

        buttonGroupZone.add(jRadioButtonPanelBadgeAllZoneByBatiment);
        jRadioButtonPanelBadgeAllZoneByBatiment.setText("Zones d'un b√¢timent");
        jRadioButtonPanelBadgeAllZoneByBatiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPanelBadgeAllZoneByBatimentActionPerformed(evt);
            }
        });

        buttonGroupZone.add(jRadioButtonPanelBadgeAllZone);
        jRadioButtonPanelBadgeAllZone.setText("Toutes les zones");
        jRadioButtonPanelBadgeAllZone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPanelBadgeAllZoneActionPerformed(evt);
            }
        });

        jButtonAjouterPanelBadgeZone.setText("Ajouter les zones");
        jButtonAjouterPanelBadgeZone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterPanelBadgeZoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBadgeLayout = new javax.swing.GroupLayout(jPanelBadge);
        jPanelBadge.setLayout(jPanelBadgeLayout);
        jPanelBadgeLayout.setHorizontalGroup(
            jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBadgeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBadgeLayout.createSequentialGroup()
                        .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPanelBadgeNom)
                            .addComponent(jLabelPanelBadgePrenom)
                            .addComponent(jLabelPanelBadgePassword)
                            .addComponent(jLabelPanelBadgeConfirmation)
                            .addComponent(jLabelPanelBadgeZone)
                            .addComponent(jLabelPanelBadgeNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPasswordFieldPanelBadgePassword, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(jTextFieldPanelBadgePrenom)
                            .addComponent(jTextFieldPanelBadgeNumero)
                            .addComponent(jPasswordFieldPanelBadgeConfirmation)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jTextFieldPanelBadgeNom))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButtonPanelBadgeScannerBadge, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                .addComponent(jButtonPanelBadgeObtenirPersonne, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBadgeLayout.createSequentialGroup()
                                    .addComponent(jCheckBoxPanelBadgePassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(1, 1, 1))
                                .addComponent(jRadioButtonPanelBadgeZoneByBatiment)
                                .addComponent(jRadioButtonPanelBadgeAllZoneByBatiment)
                                .addComponent(jRadioButtonPanelBadgeAllZone)
                                .addComponent(jComboBoxPanelBadgeZone, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxPanelBadgeBatiment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jButtonAjouterPanelBadgeZone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelBadgeLayout.createSequentialGroup()
                        .addComponent(jButtonPanelBadgeAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jButtonPanelBadgeModifier, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jButtonPanelBadgeSupprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelBadgeLayout.setVerticalGroup(
            jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBadgeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelBadgeLayout.createSequentialGroup()
                        .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPanelBadgeNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonPanelBadgeScannerBadge)
                            .addComponent(jLabelPanelBadgeNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelPanelBadgeNom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldPanelBadgeNom)))
                    .addComponent(jButtonPanelBadgeObtenirPersonne))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPanelBadgePrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPanelBadgePrenom))
                .addGap(6, 6, 6)
                .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPanelBadgePassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPasswordFieldPanelBadgePassword)
                    .addComponent(jCheckBoxPanelBadgePassword))
                .addGap(6, 6, 6)
                .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPasswordFieldPanelBadgeConfirmation)
                    .addComponent(jLabelPanelBadgeConfirmation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPanelBadgeZone, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelBadgeLayout.createSequentialGroup()
                        .addComponent(jRadioButtonPanelBadgeZoneByBatiment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonPanelBadgeAllZoneByBatiment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonPanelBadgeAllZone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxPanelBadgeBatiment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxPanelBadgeZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAjouterPanelBadgeZone))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelBadgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPanelBadgeSupprimer)
                    .addComponent(jButtonPanelBadgeAjouter)
                    .addComponent(jButtonPanelBadgeModifier))
                .addContainerGap())
        );

        getContentPane().add(jPanelBadge, "card1");

        jPanelHistorique.setPreferredSize(jPanelBadge.getPreferredSize());

        buttonGroupHistorique.add(jRadioButtonPanelHistoriqueZone);
        jRadioButtonPanelHistoriqueZone.setSelected(true);
        jRadioButtonPanelHistoriqueZone.setText("Zone");
        jRadioButtonPanelHistoriqueZone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPanelHistoriqueZoneActionPerformed(evt);
            }
        });

        buttonGroupHistorique.add(jRadioButtonPanelHistoriqueBadge);
        jRadioButtonPanelHistoriqueBadge.setText("Badge");
        jRadioButtonPanelHistoriqueBadge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPanelHistoriqueBadgeActionPerformed(evt);
            }
        });

        jComboBoxPanelHistorique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPanelHistoriqueActionPerformed(evt);
            }
        });

        jTablePanelHistorique.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Personne", "Zone", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTablePanelHistorique.setEnabled(false);
        jScrollPaneBadge.setViewportView(jTablePanelHistorique);

        jButtonPanelHistoriqueScannerBadge.setText("Scanner le badge");
        jButtonPanelHistoriqueScannerBadge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPanelHistoriqueScannerBadgeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelHistoriqueLayout = new javax.swing.GroupLayout(jPanelHistorique);
        jPanelHistorique.setLayout(jPanelHistoriqueLayout);
        jPanelHistoriqueLayout.setHorizontalGroup(
            jPanelHistoriqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHistoriqueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHistoriqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneBadge, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanelHistoriqueLayout.createSequentialGroup()
                        .addGroup(jPanelHistoriqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonPanelHistoriqueZone)
                            .addComponent(jRadioButtonPanelHistoriqueBadge))
                        .addGap(37, 37, 37)
                        .addComponent(jComboBoxPanelHistorique, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonPanelHistoriqueScannerBadge, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelHistoriqueLayout.setVerticalGroup(
            jPanelHistoriqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHistoriqueLayout.createSequentialGroup()
                .addGroup(jPanelHistoriqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHistoriqueLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jRadioButtonPanelHistoriqueZone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonPanelHistoriqueBadge))
                    .addGroup(jPanelHistoriqueLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanelHistoriqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxPanelHistorique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonPanelHistoriqueScannerBadge))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneBadge, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanelHistorique, "card2");

        jPanelAgencement.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanelAgencement.setPreferredSize(jPanelBadge.getPreferredSize());

        jComboBoxPanelAgencementBatiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPanelAgencementBatimentActionPerformed(evt);
            }
        });

        jComboBoxPanelAgencementZone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPanelAgencementZoneActionPerformed(evt);
            }
        });

        jCheckBoxPanelAgencementZoneSensible.setText("Suveillance accrue");
        jCheckBoxPanelAgencementZoneSensible.setPreferredSize(new java.awt.Dimension(81, 20));

        jComboBoxPanelAgencementLecteur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPanelAgencementLecteurActionPerformed(evt);
            }
        });

        jButtonPanelAgencementValider.setText("Valider");
        jButtonPanelAgencementValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPanelAgencementValiderActionPerformed(evt);
            }
        });

        jLabelPanelAgencementBatiment.setText("B√¢timent");

        jLabelPanelAgencementZone.setText("Zone");

        jLabelPanelAgencementNomBatiment.setText("Nom du b√¢timent");

        jLabelPanelAgencementZoneSensible.setText("Zone sensible");

        jLabelPanelAgencementNomZone.setText("Nom de la zone");

        jLabelPanelAgencementFermeture.setText("Horaire fermeture");

        jLabelPanelAgencementOuverture.setText("Horaire ouverture");

        jLabelPanelAgencementLecteur.setText("Lecteur");

        jLabelPanelAgencementIpLecteur.setText("Ip du lecteur");

        jComboBoxPanelAgencementChoix.setMaximumRowCount(9);
        jComboBoxPanelAgencementChoix.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ajouter b√¢timent", "Modifier b√¢timent", "Supprimer b√¢timent", "Ajouter zone", "Modifier zone", "Supprimer zone", "Ajouter lecteur", "Modifier lecteur", "Supprimer lecteur" }));
        jComboBoxPanelAgencementChoix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPanelAgencementChoixActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAgencementLayout = new javax.swing.GroupLayout(jPanelAgencement);
        jPanelAgencement.setLayout(jPanelAgencementLayout);
        jPanelAgencementLayout.setHorizontalGroup(
            jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAgencementLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonPanelAgencementValider, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparatorPanelAgencementZone)
                        .addComponent(jSeparatorPanelAgencementLecteur)
                        .addGroup(jPanelAgencementLayout.createSequentialGroup()
                            .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelPanelAgencementIpLecteur, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                .addComponent(jLabelPanelAgencementLecteur, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBoxPanelAgencementLecteur, 0, 132, Short.MAX_VALUE)
                                .addComponent(jFormattedTextFieldPanelAgencementIpLecteur, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                        .addGroup(jPanelAgencementLayout.createSequentialGroup()
                            .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelPanelAgencementFermeture, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelPanelAgencementOuverture, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jFormattedTextFieldPanelAgencementOuverture, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jFormattedTextFieldPanelAgencementFermeture, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanelAgencementLayout.createSequentialGroup()
                            .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabelPanelAgencementNomZone, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelPanelAgencementZoneSensible, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelPanelAgencementZone, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldPanelAgencementNomZone, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxPanelAgencementZone, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBoxPanelAgencementZoneSensible, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelAgencementLayout.createSequentialGroup()
                            .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelPanelAgencementNomBatiment, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                .addComponent(jLabelPanelAgencementBatiment, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldPanelAgencementNomBatiment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxPanelAgencementBatiment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jComboBoxPanelAgencementChoix, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(133, 133, 133))
        );
        jPanelAgencementLayout.setVerticalGroup(
            jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAgencementLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBoxPanelAgencementChoix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxPanelAgencementBatiment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPanelAgencementBatiment, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPanelAgencementNomBatiment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPanelAgencementNomBatiment, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jSeparatorPanelAgencementZone, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPanelAgencementZone, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPanelAgencementZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPanelAgencementNomZone, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPanelAgencementNomZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPanelAgencementZoneSensible, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPanelAgencementZoneSensible, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextFieldPanelAgencementOuverture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPanelAgencementOuverture, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextFieldPanelAgencementFermeture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPanelAgencementFermeture, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparatorPanelAgencementLecteur, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxPanelAgencementLecteur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPanelAgencementLecteur, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAgencementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelPanelAgencementIpLecteur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jFormattedTextFieldPanelAgencementIpLecteur))
                .addGap(18, 18, 18)
                .addComponent(jButtonPanelAgencementValider)
                .addContainerGap())
        );

        getContentPane().add(jPanelAgencement, "card4");

        jMenu.setText("Menu");

        jMenuItemBadge.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemBadge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/client/image/badge.png"))); // NOI18N
        jMenuItemBadge.setText("Gestion des badges");
        jMenuItemBadge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBadgeActionPerformed(evt);
            }
        });
        jMenu.add(jMenuItemBadge);

        jMenuItemHistorique.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemHistorique.setIcon(new javax.swing.ImageIcon(getClass().getResource("/client/image/historique.png"))); // NOI18N
        jMenuItemHistorique.setText("Historique des acc√®s");
        jMenuItemHistorique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHistoriqueActionPerformed(evt);
            }
        });
        jMenu.add(jMenuItemHistorique);

        jMenuItemBatiment.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemBatiment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/client/image/agencement.png"))); // NOI18N
        jMenuItemBatiment.setText("Gestion de l'agencement");
        jMenuItemBatiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBatimentActionPerformed(evt);
            }
        });
        jMenu.add(jMenuItemBatiment);

        jMenuBar.add(jMenu);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemHistoriqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHistoriqueActionPerformed
        defaultPanelHistorique();
        setContentPane(jPanelHistorique);
        pack();
        jPanelHistorique.setVisible(true);
    }//GEN-LAST:event_jMenuItemHistoriqueActionPerformed

    private void jMenuItemBadgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBadgeActionPerformed
        defaultPanelBadge();
        setContentPane(jPanelBadge);
        pack();
        jPanelBadge.setVisible(true);
    }//GEN-LAST:event_jMenuItemBadgeActionPerformed

    private void jButtonPanelBadgeScannerBadgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPanelBadgeScannerBadgeActionPerformed
        Lecteur.EteindreAntenne();
        if(!Lecteur.AllumerAntenne()){
            System.err.println("Probleme allumage de l'antenne");
        }
        String numero = Lecteur.LectureBadge(LIGNE);
        Lecteur.EteindreAntenne();
        Badge badge = badgeSrv.getByNumero(numero);
        if (badge != null) {
            this.personne = personneSrv.getByBadge(badge);
            defaultPanelBadge();
            swtichEnabledButton(true);
            jTextFieldPanelBadgeNumero.setText(numero);
            jTextFieldPanelBadgeNom.setText(this.personne.getNom());
            jTextFieldPanelBadgePrenom.setText(this.personne.getPrenom());
            List<Acces> acces = accesSrv.getByBadge(badge);
            DefaultListModel listZone = (DefaultListModel) jListPanelBadgeZone.getModel();
            for (Acces a : acces) {
                listZone.addElement(a.getZone().getNomZone());
            }
        } else {
            this.personne = null;
            defaultPanelBadge();
            jTextFieldPanelBadgeNumero.setText(numero);
        }
    }//GEN-LAST:event_jButtonPanelBadgeScannerBadgeActionPerformed

    private void jButtonPanelBadgeAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPanelBadgeAjouterActionPerformed
        String numero = jTextFieldPanelBadgeNumero.getText();
        String nom = jTextFieldPanelBadgeNom.getText();
        String prenom = jTextFieldPanelBadgePrenom.getText();
        String password = new String(jPasswordFieldPanelBadgePassword.getPassword());
        String confirmation = new String(jPasswordFieldPanelBadgeConfirmation.getPassword());
        Badge badge = new Badge(numero, Badge.encode(password), new Date());
        Personne personne = new Personne(nom, prenom, badge);
        List<Acces> acces = new ArrayList<>();
        if (personneSrv.getByNomPrenom(nom, prenom) == null) {
            if (validateNumero(numero) && badgeSrv.getByNumero(numero) == null) {
                Lecteur.EteindreAntenne();
                if(!Lecteur.AllumerAntenne()){
                    System.err.println("Probleme allumage de l'antenne");
                }
                if (Lecteur.EcritureBadge(numero, LIGNE)) {
                    Lecteur.EteindreAntenne();
                    if (validatePassword(password) && password.equals(confirmation)) {
                        this.personne = personneSrv.add(personne);
                        if (this.personne != null) {
                            DefaultListModel listZone = (DefaultListModel) jListPanelBadgeZone.getModel();
                            for (int i = 0; i < listZone.getSize(); i++) {
                                acces.add(new Acces(this.personne.getBadge(), zoneSrv.getByNomZone((String) listZone.get(i)), null));
                            }
                            accesSrv.addAll(acces);
                            JOptionPane.showMessageDialog(this, "Vous avez ajout√© " + this.personne.getNom()
                                    + " " + this.personne.getPrenom()
                                    + " avec le badge " + this.personne.getBadge().getNumero(),
                                    "Ajout r√©ussi", JOptionPane.INFORMATION_MESSAGE);
                            defaultPanelBadge();
                        } else {
                            JOptionPane.showMessageDialog(this, "L'ajout n'a pas pu etre effectu√©.",
                                    "Ajout impossible", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Les mots de passe ne sont pas identiques ou sont invalides.\n"
                                + "Le mot de passe doit √™tre compos√© de 6 chiffres exactement.",
                                "Mot de passe incorrect", JOptionPane.ERROR_MESSAGE);
                        jPasswordFieldPanelBadgePassword.setText("");
                        jPasswordFieldPanelBadgeConfirmation.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "L'√©criture sur le badge n'as pas r√©ussi",
                            "Ecriture impossible", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ce num√©ro est d√©j√† utils√© ou n'est pas valide.\n"
                        + "8 caract√®res exactement compos√©s de chiffres et lettres sans accent.",
                        "Badge invalide", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Cette personne √† d√©j√† √©t√© ajout√©e.",
                    "Personne existe d√©j√†", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonPanelBadgeAjouterActionPerformed

    private void jButtonPanelBadgeSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPanelBadgeSupprimerActionPerformed
        List<Acces> acces = accesSrv.getByBadge(this.personne.getBadge());
        if (personneSrv.remove(this.personne)) {
            accesSrv.removeAll(acces);
            this.personne = null;
            JOptionPane.showMessageDialog(this, "La suppression a √©t√© effectu√©e.",
                    "Suppression r√©ussi", JOptionPane.INFORMATION_MESSAGE);
            defaultPanelBadge();
        } else {
            JOptionPane.showMessageDialog(this, "La suppression a √©chou√©.",
                    "Suppression impossible", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonPanelBadgeSupprimerActionPerformed

    private void jButtonPanelBadgeModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPanelBadgeModifierActionPerformed
        String numero = jTextFieldPanelBadgeNumero.getText();
        String nom = jTextFieldPanelBadgeNom.getText();
        String prenom = jTextFieldPanelBadgePrenom.getText();
        String password;
        String confirmation;
        Badge badge = new Badge(numero, null, this.personne.getBadge().getDateCreation());
        if (jCheckBoxPanelBadgePassword.isSelected()) {
            password = this.personne.getBadge().getPassword();
            confirmation = "";
            badge.setPassword(password);
        } else {
            password = new String(jPasswordFieldPanelBadgePassword.getPassword());
            confirmation = new String(jPasswordFieldPanelBadgeConfirmation.getPassword());
            badge.setPassword(Badge.encode(password));
        }
        badge.setIdBadge(this.personne.getBadge().getIdBadge());
        Personne personne = new Personne(nom, prenom, badge);
        personne.setIdPersonne(this.personne.getIdPersonne());
        if ((nom.equals(this.personne.getNom()) && prenom.equals(this.personne.getPrenom())) || personneSrv.getByNomPrenom(nom, prenom) == null) {
            if (validateNumero(numero) && (numero.equals(this.personne.getBadge().getNumero()) || badgeSrv.getByNumero(numero) == null)) {
                Lecteur.EteindreAntenne();
                if(!Lecteur.AllumerAntenne()){
                    System.err.println("Probleme allumage de l'antenne");
                }
                if (Lecteur.EcritureBadge(numero, LIGNE)) {
                    Lecteur.EteindreAntenne();
                    if (jCheckBoxPanelBadgePassword.isSelected() || (validatePassword(password) && password.equals(confirmation))) {
                        if (personneSrv.update(personne)) {
                            this.personne = personneSrv.getByIdPersonne(personne.getIdPersonne());
                            DefaultListModel listZone = (DefaultListModel) jListPanelBadgeZone.getModel();
                            List<Acces> acces = accesSrv.getByBadge(personne.getBadge());
                            List<Object> nomZones = new ArrayList<>(Arrays.asList(listZone.toArray()));
                            for (int i = 0; i < acces.size(); i++) {
                                String nomZone = acces.get(i).getZone().getNomZone();
                                if (nomZones.contains(nomZone)) {
                                    acces.remove(i);
                                    nomZones.remove(nomZone);
                                    i--;
                                }
                            }
                            accesSrv.removeAll(acces);
                            acces = new ArrayList<>();
                            for (int i = 0; i < nomZones.size(); i++) {
                                acces.add(new Acces(this.personne.getBadge(), zoneSrv.getByNomZone((String) nomZones.get(i)), null));
                            }
                            accesSrv.addAll(acces);
                            JOptionPane.showMessageDialog(this, "Vos modification ont √©t√© prises en compte:\n "
                                    + this.personne.getNom()
                                    + " " + this.personne.getPrenom()
                                    + " avec le badge " + this.personne.getBadge().getNumero(),
                                    "Ajout r√©ussi", JOptionPane.INFORMATION_MESSAGE);
                            defaultPanelBadge();
                        } else {
                            JOptionPane.showMessageDialog(this, "La modification n'a pas pu etre effectu√©e.",
                                    "Ajout impossible", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Les mots de passe ne sont pas identiques ou sont invalides.\n"
                                + "Le mot de passe doit √™tre compos√© de 6 chiffres exactement.",
                                "Mot de passe incorrect", JOptionPane.ERROR_MESSAGE);
                        jPasswordFieldPanelBadgePassword.setText("");
                        jPasswordFieldPanelBadgeConfirmation.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "L'√©criture sur le badge n'as pas r√©ussi",
                            "Ecriture impossible", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ce num√©ro est d√©j√† utils√© ou n'est pas valide.\n"
                        + "8 caract√®res exactement compos√©s de chiffres et lettres sans accent.",
                        "Badge invalide", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Cette personne √† d√©j√† √©t√© ajout√©.",
                    "Personne existe d√©j√†", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonPanelBadgeModifierActionPerformed

    private void jButtonPanelBadgeObtenirPersonneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPanelBadgeObtenirPersonneActionPerformed
        String nom = jTextFieldPanelBadgeNom.getText();
        String prenom = jTextFieldPanelBadgePrenom.getText();
        Personne personne = personneSrv.getByNomPrenom(nom, prenom);
        this.personne = personne;
        if (personne != null) {
            defaultPanelBadge();
            swtichEnabledButton(true);
            jTextFieldPanelBadgeNumero.setText(personne.getBadge().getNumero());
            jTextFieldPanelBadgeNom.setText(personne.getNom());
            jTextFieldPanelBadgePrenom.setText(personne.getPrenom());
            DefaultListModel listZone = (DefaultListModel) jListPanelBadgeZone.getModel();
            List<Acces> acces = accesSrv.getByBadge(personne.getBadge());
            for (Acces a : acces) {
                listZone.addElement(a.getZone().getNomZone());
            }
        } else {
            this.personne = null;
            defaultPanelBadge();
            jTextFieldPanelBadgeNom.setText(nom);
            jTextFieldPanelBadgePrenom.setText(prenom);
        }
    }//GEN-LAST:event_jButtonPanelBadgeObtenirPersonneActionPerformed

    private void jCheckBoxPanelBadgePasswordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPanelBadgePasswordItemStateChanged
        if (jCheckBoxPanelBadgePassword.isSelected()) {
            jPasswordFieldPanelBadgePassword.setText("**********");
            jPasswordFieldPanelBadgeConfirmation.setText("**********");
            jPasswordFieldPanelBadgePassword.setEditable(false);
            jPasswordFieldPanelBadgeConfirmation.setEditable(false);
        } else {
            jPasswordFieldPanelBadgePassword.setText("");
            jPasswordFieldPanelBadgeConfirmation.setText("");
            jPasswordFieldPanelBadgePassword.setEditable(true);
            jPasswordFieldPanelBadgeConfirmation.setEditable(true);
        }
    }//GEN-LAST:event_jCheckBoxPanelBadgePasswordItemStateChanged

    private void jButtonPanelHistoriqueScannerBadgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPanelHistoriqueScannerBadgeActionPerformed
        Lecteur.EteindreAntenne();
        if(!Lecteur.AllumerAntenne()){
            System.err.println("Probleme allumage de l'antenne");
        }
        String numero = Lecteur.LectureBadge(LIGNE);
        Lecteur.EteindreAntenne();
        jComboBoxPanelHistorique.setSelectedItem(numero);
    }//GEN-LAST:event_jButtonPanelHistoriqueScannerBadgeActionPerformed

    private void jRadioButtonPanelHistoriqueZoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPanelHistoriqueZoneActionPerformed
        jButtonPanelHistoriqueScannerBadge.setVisible(false);
        jComboBoxPanelHistorique.removeAllItems();
        List<String> nomZones = zoneSrv.getListNomZone();
        for (String nomZone : nomZones) {
            jComboBoxPanelHistorique.addItem(nomZone);
        }
    }//GEN-LAST:event_jRadioButtonPanelHistoriqueZoneActionPerformed

    private void jRadioButtonPanelHistoriqueBadgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPanelHistoriqueBadgeActionPerformed
        jButtonPanelHistoriqueScannerBadge.setVisible(true);
        jComboBoxPanelHistorique.removeAllItems();
        List<String> nomBadges = badgeSrv.getListNumero();
        for (String nomBadge : nomBadges) {
            jComboBoxPanelHistorique.addItem(nomBadge);
        }
    }//GEN-LAST:event_jRadioButtonPanelHistoriqueBadgeActionPerformed

    private void jButtonAjouterPanelBadgeZoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterPanelBadgeZoneActionPerformed
        DefaultListModel listeZone = (DefaultListModel) jListPanelBadgeZone.getModel();
        if (jRadioButtonPanelBadgeZoneByBatiment.isSelected()) {
            String nomZone = (String) jComboBoxPanelBadgeZone.getSelectedItem();
            if (nomZone != null) {
                if (!listeZone.contains(nomZone)) {
                    listeZone.addElement(nomZone);
                }
            }
        } else if (jRadioButtonPanelBadgeAllZoneByBatiment.isSelected()) {
            String nomBatiment = (String) jComboBoxPanelBadgeBatiment.getSelectedItem();
            if (nomBatiment != null) {
                List<Zone> zones = batimentSrv.getByNomBatiment(nomBatiment).getZones();
                for (Zone zone : zones) {
                    if (!listeZone.contains(zone.getNomZone())) {
                        listeZone.addElement(zone.getNomZone());
                    }
                }
            }
        } else if (jRadioButtonPanelBadgeAllZone.isSelected()) {
            List<String> nomZones = zoneSrv.getListNomZone();
            for (String nomZone : nomZones) {
                if (!listeZone.contains(nomZone)) {
                    listeZone.addElement(nomZone);
                }
            }
        }
    }//GEN-LAST:event_jButtonAjouterPanelBadgeZoneActionPerformed

    private void jRadioButtonPanelBadgeZoneByBatimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPanelBadgeZoneByBatimentActionPerformed
        jComboBoxPanelBadgeBatiment.setVisible(true);
        jComboBoxPanelBadgeZone.setVisible(true);
        jComboBoxPanelBadgeBatiment.removeAllItems();
        List<String> nomBatiments = batimentSrv.getListNomBatiment();
        for (String nomBatiment : nomBatiments) {
            jComboBoxPanelBadgeBatiment.addItem(nomBatiment);
        }
    }//GEN-LAST:event_jRadioButtonPanelBadgeZoneByBatimentActionPerformed

    private void jRadioButtonPanelBadgeAllZoneByBatimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPanelBadgeAllZoneByBatimentActionPerformed
        jComboBoxPanelBadgeBatiment.setVisible(true);
        jComboBoxPanelBadgeZone.setVisible(false);
        jComboBoxPanelBadgeBatiment.removeAllItems();
        List<String> nomBatiments = batimentSrv.getListNomBatiment();
        for (String nomBatiment : nomBatiments) {
            jComboBoxPanelBadgeBatiment.addItem(nomBatiment);
        }
    }//GEN-LAST:event_jRadioButtonPanelBadgeAllZoneByBatimentActionPerformed

    private void jRadioButtonPanelBadgeAllZoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPanelBadgeAllZoneActionPerformed
        jComboBoxPanelBadgeBatiment.setVisible(false);
        jComboBoxPanelBadgeZone.setVisible(false);
    }//GEN-LAST:event_jRadioButtonPanelBadgeAllZoneActionPerformed

    private void jComboBoxPanelHistoriqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPanelHistoriqueActionPerformed
        if (jComboBoxPanelHistorique.getItemCount() > 0) {
            String recherche = (String) jComboBoxPanelHistorique.getSelectedItem();
            DefaultTableModel model = (DefaultTableModel) jTablePanelHistorique.getModel();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            if (recherche != null) {
                List<Acces> acces = new ArrayList<>();
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                if (jRadioButtonPanelHistoriqueZone.isSelected()) {
                    acces = accesSrv.getByZone(zoneSrv.getByNomZone(recherche));
                } else if (jRadioButtonPanelHistoriqueBadge.isSelected()) {
                    acces = accesSrv.getByBadge(badgeSrv.getByNumero(recherche));
                }
                for (Acces a : acces) {
                    Personne personnne = personneSrv.getByBadge(a.getBadge());
                    for (Date datePassage : a.getDatePassages()) {
                        model.addRow(new String[]{personnne.getNom() + " " + personnne.getPrenom(), a.getZone().getNomZone(), sdf.format(datePassage)});
                    }
                }
            }
        }
    }//GEN-LAST:event_jComboBoxPanelHistoriqueActionPerformed

    private void jComboBoxPanelBadgeBatimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPanelBadgeBatimentActionPerformed
        if (jRadioButtonPanelBadgeZoneByBatiment.isSelected()) {
            jComboBoxPanelBadgeZone.removeAllItems();
            String nomBatiment = (String) jComboBoxPanelBadgeBatiment.getSelectedItem();
            if (nomBatiment != null) {
                List<Zone> zones = batimentSrv.getByNomBatiment(nomBatiment).getZones();
                for (Zone zone : zones) {
                    jComboBoxPanelBadgeZone.addItem(zone.getNomZone());
                }
            }
        }
    }//GEN-LAST:event_jComboBoxPanelBadgeBatimentActionPerformed

    private void jListPanelBadgeZoneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPanelBadgeZoneMouseClicked
        if (evt.getClickCount() == 2) {
            DefaultListModel listeZone = (DefaultListModel) jListPanelBadgeZone.getModel();
            listeZone.removeElement(jListPanelBadgeZone.getSelectedValue());
        }
    }//GEN-LAST:event_jListPanelBadgeZoneMouseClicked

    private void jMenuItemBatimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBatimentActionPerformed
        defaultPanelBatiment();
        setContentPane(jPanelAgencement);
        pack();
        jPanelAgencement.setVisible(true);
    }//GEN-LAST:event_jMenuItemBatimentActionPerformed

    private void jComboBoxPanelAgencementChoixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPanelAgencementChoixActionPerformed
        int index = jComboBoxPanelAgencementChoix.getSelectedIndex();
        if (index < 6) {
            if (index < 3) {
                jSeparatorPanelAgencementZone.setVisible(false);
                jLabelPanelAgencementZone.setVisible(false);
                jComboBoxPanelAgencementZone.setVisible(false);
                jLabelPanelAgencementNomZone.setVisible(false);
                jTextFieldPanelAgencementNomZone.setVisible(false);
                jLabelPanelAgencementZoneSensible.setVisible(false);
                jCheckBoxPanelAgencementZoneSensible.setVisible(false);
                jLabelPanelAgencementOuverture.setVisible(false);
                jFormattedTextFieldPanelAgencementOuverture.setVisible(false);
                jLabelPanelAgencementFermeture.setVisible(false);
                jFormattedTextFieldPanelAgencementFermeture.setVisible(false);
            }
            jSeparatorPanelAgencementLecteur.setVisible(false);
            jLabelPanelAgencementLecteur.setVisible(false);
            jComboBoxPanelAgencementLecteur.setVisible(false);
            jLabelPanelAgencementIpLecteur.setVisible(false);
            jFormattedTextFieldPanelAgencementIpLecteur.setVisible(false);
        }
        if (index >= 3) {
            jLabelPanelAgencementBatiment.setVisible(true);
            jComboBoxPanelAgencementBatiment.removeAllItems();
            for (String nomBatiment : batimentSrv.getListNomBatiment()) {
                jComboBoxPanelAgencementBatiment.addItem(nomBatiment);
            }
            jComboBoxPanelAgencementBatiment.setVisible(true);
            jComboBoxPanelAgencementBatiment.setVisible(true);
            jLabelPanelAgencementNomBatiment.setVisible(false);
            jTextFieldPanelAgencementNomBatiment.setVisible(false);
            jSeparatorPanelAgencementZone.setVisible(true);
            if (index >= 6) {
                jLabelPanelAgencementZone.setVisible(true);
                jComboBoxPanelAgencementZone.setVisible(true);
                jLabelPanelAgencementNomZone.setVisible(false);
                jTextFieldPanelAgencementNomZone.setVisible(false);
                jLabelPanelAgencementZoneSensible.setVisible(false);
                jCheckBoxPanelAgencementZoneSensible.setSelected(false);
                jCheckBoxPanelAgencementZoneSensible.setVisible(false);
                jLabelPanelAgencementOuverture.setVisible(false);
                jFormattedTextFieldPanelAgencementOuverture.setVisible(false);
                jLabelPanelAgencementFermeture.setVisible(false);
                jFormattedTextFieldPanelAgencementFermeture.setVisible(false);
                jSeparatorPanelAgencementLecteur.setVisible(true);
            }
        }
        switch (index) {
            case 0:
                jLabelPanelAgencementBatiment.setVisible(false);
                jComboBoxPanelAgencementBatiment.setVisible(false);
                jLabelPanelAgencementNomBatiment.setVisible(true);
                jTextFieldPanelAgencementNomBatiment.setText("");
                jTextFieldPanelAgencementNomBatiment.setVisible(true);
                break;
            case 1:
                jLabelPanelAgencementBatiment.setVisible(true);
                jComboBoxPanelAgencementBatiment.removeAllItems();
                for (String nomBatiment : batimentSrv.getListNomBatiment()) {
                    jComboBoxPanelAgencementBatiment.addItem(nomBatiment);
                }
                jComboBoxPanelAgencementBatiment.setVisible(true);
                jLabelPanelAgencementNomBatiment.setVisible(true);
                jTextFieldPanelAgencementNomBatiment.setVisible(true);
                break;
            case 2:
                jLabelPanelAgencementBatiment.setVisible(true);
                jComboBoxPanelAgencementBatiment.removeAllItems();
                for (String nomBatiment : batimentSrv.getListNomBatiment()) {
                    jComboBoxPanelAgencementBatiment.addItem(nomBatiment);
                }
                jComboBoxPanelAgencementBatiment.setVisible(true);
                jLabelPanelAgencementNomBatiment.setVisible(false);
                jTextFieldPanelAgencementNomBatiment.setVisible(false);
                break;
            case 3:
                jLabelPanelAgencementZone.setVisible(false);
                jComboBoxPanelAgencementZone.setVisible(false);
                jLabelPanelAgencementNomZone.setVisible(true);
                jTextFieldPanelAgencementNomZone.setText("");
                jTextFieldPanelAgencementNomZone.setVisible(true);
                jLabelPanelAgencementZoneSensible.setVisible(true);
                jCheckBoxPanelAgencementZoneSensible.setSelected(false);
                jCheckBoxPanelAgencementZoneSensible.setVisible(true);
                jLabelPanelAgencementOuverture.setVisible(true);
                jFormattedTextFieldPanelAgencementOuverture.setText("");
                jFormattedTextFieldPanelAgencementOuverture.setVisible(true);
                jLabelPanelAgencementFermeture.setVisible(true);
                jFormattedTextFieldPanelAgencementFermeture.setText("");
                jFormattedTextFieldPanelAgencementFermeture.setVisible(true);
                break;
            case 4:
                jLabelPanelAgencementZone.setVisible(true);
                jComboBoxPanelAgencementZone.setVisible(true);
                jLabelPanelAgencementNomZone.setVisible(true);
                jTextFieldPanelAgencementNomZone.setVisible(true);
                jLabelPanelAgencementZoneSensible.setVisible(true);
                jCheckBoxPanelAgencementZoneSensible.setSelected(false);
                jCheckBoxPanelAgencementZoneSensible.setVisible(true);
                jLabelPanelAgencementOuverture.setVisible(true);
                jFormattedTextFieldPanelAgencementOuverture.setVisible(true);
                jLabelPanelAgencementFermeture.setVisible(true);
                jFormattedTextFieldPanelAgencementFermeture.setVisible(true);
                break;
            case 5:
                jLabelPanelAgencementZone.setVisible(true);
                jComboBoxPanelAgencementZone.setVisible(true);
                jLabelPanelAgencementNomZone.setVisible(false);
                jTextFieldPanelAgencementNomZone.setVisible(false);
                jLabelPanelAgencementZoneSensible.setVisible(false);
                jCheckBoxPanelAgencementZoneSensible.setSelected(false);
                jCheckBoxPanelAgencementZoneSensible.setVisible(false);
                jLabelPanelAgencementOuverture.setVisible(false);
                jFormattedTextFieldPanelAgencementOuverture.setVisible(false);
                jLabelPanelAgencementFermeture.setVisible(false);
                jFormattedTextFieldPanelAgencementFermeture.setVisible(false);
                break;
            case 6:
                jLabelPanelAgencementLecteur.setVisible(false);
                jComboBoxPanelAgencementLecteur.setVisible(false);
                jLabelPanelAgencementIpLecteur.setVisible(true);
                jFormattedTextFieldPanelAgencementIpLecteur.setText("");
                jFormattedTextFieldPanelAgencementIpLecteur.setVisible(true);
                break;
            case 7:
                jLabelPanelAgencementLecteur.setVisible(true);
                jComboBoxPanelAgencementLecteur.setVisible(true);
                jLabelPanelAgencementIpLecteur.setVisible(true);
                jFormattedTextFieldPanelAgencementIpLecteur.setVisible(true);
                break;
            case 8:
                jLabelPanelAgencementLecteur.setVisible(true);
                jComboBoxPanelAgencementLecteur.setVisible(true);
                jLabelPanelAgencementIpLecteur.setVisible(false);
                jFormattedTextFieldPanelAgencementIpLecteur.setVisible(false);
                break;
        }
    }//GEN-LAST:event_jComboBoxPanelAgencementChoixActionPerformed

    private void jComboBoxPanelAgencementBatimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPanelAgencementBatimentActionPerformed
        if (jComboBoxPanelAgencementBatiment.getItemCount() > 0) {
            int index = jComboBoxPanelAgencementChoix.getSelectedIndex();
            if (index == 1) {
                Batiment batiment = batimentSrv.getByNomBatiment((String) jComboBoxPanelAgencementBatiment.getSelectedItem());
                jTextFieldPanelAgencementNomBatiment.setText(batiment.getNomBatiment());
            } else if (index >= 3) {
                Batiment batiment = batimentSrv.getByNomBatiment((String) jComboBoxPanelAgencementBatiment.getSelectedItem());
                jComboBoxPanelAgencementZone.removeAllItems();
                for (Zone zone : batiment.getZones()) {
                    jComboBoxPanelAgencementZone.addItem(zone.getNomZone());
                }
            }
        }
    }//GEN-LAST:event_jComboBoxPanelAgencementBatimentActionPerformed

    private void jComboBoxPanelAgencementZoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPanelAgencementZoneActionPerformed
        if (jComboBoxPanelAgencementZone.getItemCount() > 0) {
            int index = jComboBoxPanelAgencementChoix.getSelectedIndex();
            if (index == 4) {
                Zone zone = zoneSrv.getByNomZone((String) jComboBoxPanelAgencementZone.getSelectedItem());
                jTextFieldPanelAgencementNomZone.setText(zone.getNomZone());
                jCheckBoxPanelAgencementZoneSensible.setSelected(zone.getSensible());
                jFormattedTextFieldPanelAgencementOuverture.setText(zone.getHoraireOuverture());
                jFormattedTextFieldPanelAgencementFermeture.setText(zone.getHoraireFermeture());
            } else if (index >= 6) {
                Zone zone = zoneSrv.getByNomZone((String) jComboBoxPanelAgencementZone.getSelectedItem());
                jComboBoxPanelAgencementLecteur.removeAllItems();
                for (Lecteur lecteur : zone.getLecteurs()) {
                    jComboBoxPanelAgencementLecteur.addItem(lecteur.getIp());
                }
            }
        }
    }//GEN-LAST:event_jComboBoxPanelAgencementZoneActionPerformed

    private void jComboBoxPanelAgencementLecteurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPanelAgencementLecteurActionPerformed
        if (jComboBoxPanelAgencementLecteur.getItemCount() > 0) {
            int index = jComboBoxPanelAgencementChoix.getSelectedIndex();
            if (index == 7) {
                Lecteur lecteur = lecteurSrv.getByIp((String) jComboBoxPanelAgencementLecteur.getSelectedItem());
                jFormattedTextFieldPanelAgencementIpLecteur.setText(ipToFormattedText(lecteur.getIp()));
            }
        }
    }//GEN-LAST:event_jComboBoxPanelAgencementLecteurActionPerformed

    private void jButtonPanelAgencementValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPanelAgencementValiderActionPerformed
        int index = jComboBoxPanelAgencementChoix.getSelectedIndex();
        Batiment batiment;
        Zone zone;
        Lecteur lecteur;
        switch (index) {
            case 0:
                batiment = new Batiment(jTextFieldPanelAgencementNomBatiment.getText(), null);
                if (batimentSrv.add(batiment) != null) {
                    JOptionPane.showMessageDialog(this, "Le b√¢timent a √©t√© ajout√©.",
                            "Ajout r√©ussi", JOptionPane.INFORMATION_MESSAGE);
                    jTextFieldPanelAgencementNomBatiment.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Le b√¢timent n'a pas pu √™tre ajout√©.",
                            "Ajout impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 1:
                if (jComboBoxPanelAgencementBatiment.getSelectedItem() != null) {
                    batiment = batimentSrv.getByNomBatiment((String) jComboBoxPanelAgencementBatiment.getSelectedItem());
                    batiment.setNomBatiment(jTextFieldPanelAgencementNomBatiment.getText());
                    if (batimentSrv.update(batiment)) {
                        JOptionPane.showMessageDialog(this, "Le b√¢timent a √©t√© mis √† jour.",
                                "Modification r√©ussie", JOptionPane.INFORMATION_MESSAGE);
                        jComboBoxPanelAgencementBatiment.removeAllItems();
                        for (String nomBatiment : batimentSrv.getListNomBatiment()) {
                            jComboBoxPanelAgencementBatiment.addItem(nomBatiment);
                        }
                        jComboBoxPanelAgencementBatiment.setSelectedItem(batiment.getNomBatiment());
                    } else {
                        JOptionPane.showMessageDialog(this, "Le b√¢timent n'a pas pu √™tre modifi√©.",
                                "Modification impossible", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Le b√¢timent n'a pas pu √™tre modifi√©.",
                            "Modification impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 2:
                if (jComboBoxPanelAgencementBatiment.getSelectedItem() != null) {
                    batiment = batimentSrv.getByNomBatiment((String) jComboBoxPanelAgencementBatiment.getSelectedItem());
                    List<Acces> acces = new ArrayList<>();
                    for (Zone z : batiment.getZones()) {
                        acces.addAll(accesSrv.getByZone(z));
                    }
                    if (batimentSrv.remove(batiment)) {
                        accesSrv.removeAll(acces);
                        JOptionPane.showMessageDialog(this, "Le b√¢timent a √©t√© supprim√©.",
                                "Suppression r√©ussie", JOptionPane.INFORMATION_MESSAGE);
                        jComboBoxPanelAgencementBatiment.removeAllItems();
                        for (String nomBatiment : batimentSrv.getListNomBatiment()) {
                            jComboBoxPanelAgencementBatiment.addItem(nomBatiment);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Le b√¢timent n'a pas pu √™tre supprim√©.",
                                "Suppression impossible", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Le b√¢timent n'a pas pu √™tre supprim√©.",
                            "Suppression impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 3:
                if (jComboBoxPanelAgencementBatiment.getSelectedItem() != null) {
                    batiment = batimentSrv.getByNomBatiment((String) jComboBoxPanelAgencementBatiment.getSelectedItem());
                    zone = new Zone(jTextFieldPanelAgencementNomZone.getText(),
                            jCheckBoxPanelAgencementZoneSensible.isSelected(),
                            formattedTextToHoraire(jFormattedTextFieldPanelAgencementOuverture.getText()),
                            formattedTextToHoraire(jFormattedTextFieldPanelAgencementFermeture.getText()),
                            null);
                    if (zoneSrv.add(zone, batiment.getIdBatiment()) != null) {
                        JOptionPane.showMessageDialog(this, "La zone a √©t√© ajout√©e.",
                                "Ajout r√©ussi", JOptionPane.INFORMATION_MESSAGE);
                        jTextFieldPanelAgencementNomZone.setText("");
                        jCheckBoxPanelAgencementZoneSensible.setSelected(false);
                        jFormattedTextFieldPanelAgencementOuverture.setText("");
                        jFormattedTextFieldPanelAgencementFermeture.setText("");
                    } else {
                        JOptionPane.showMessageDialog(this, "La zone n'a pas pu √™tre ajout√©e.",
                                "Ajout impossible", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La zone n'a pas pu √™tre ajout√©e.",
                            "Ajout impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 4:
                if (jComboBoxPanelAgencementZone.getSelectedItem() != null) {
                    zone = zoneSrv.getByNomZone((String) jComboBoxPanelAgencementZone.getSelectedItem());
                    zone.setNomZone(jTextFieldPanelAgencementNomZone.getText());
                    zone.setSensible(jCheckBoxPanelAgencementZoneSensible.isSelected());
                    zone.setHoraireOuverture(formattedTextToHoraire(jFormattedTextFieldPanelAgencementOuverture.getText()));
                    zone.setHoraireFermeture(formattedTextToHoraire(jFormattedTextFieldPanelAgencementFermeture.getText()));
                    if (zoneSrv.update(zone)) {
                        JOptionPane.showMessageDialog(this, "La zone a √©t√© mise √† jour.",
                                "Modification r√©ussie", JOptionPane.INFORMATION_MESSAGE);
                        batiment = batimentSrv.getByNomBatiment((String) jComboBoxPanelAgencementBatiment.getSelectedItem());
                        jComboBoxPanelAgencementZone.removeAllItems();
                        for (Zone z : batiment.getZones()) {
                            jComboBoxPanelAgencementZone.addItem(z.getNomZone());
                        }
                        jComboBoxPanelAgencementZone.setSelectedItem(zone.getNomZone());
                    } else {
                        JOptionPane.showMessageDialog(this, "La zone n'a pas pu √™tre modifi√©e.",
                                "Modification impossible", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La zone n'a pas pu √™tre modifi√©e.",
                            "Modification impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 5:
                if (jComboBoxPanelAgencementZone.getSelectedItem() != null) {
                    zone = zoneSrv.getByNomZone((String) jComboBoxPanelAgencementZone.getSelectedItem());
                    List<Acces> acces = accesSrv.getByZone(zone);
                    if (zoneSrv.remove(zone)) {
                        accesSrv.removeAll(acces);
                        JOptionPane.showMessageDialog(this, "La zone a √©t√© supprim√©e.",
                                "Suppression r√©ussie", JOptionPane.INFORMATION_MESSAGE);
                        batiment = batimentSrv.getByNomBatiment((String) jComboBoxPanelAgencementBatiment.getSelectedItem());
                        jComboBoxPanelAgencementZone.removeAllItems();
                        for (Zone z : batiment.getZones()) {
                            jComboBoxPanelAgencementZone.addItem(z.getNomZone());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "La zone n'a pas pu √™tre supprim√©e.",
                                "Suppression impossible", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La zone n'a pas pu √™tre supprim√©e.",
                            "Suppression impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 6:
                if (jComboBoxPanelAgencementZone.getSelectedItem() != null) {
                    zone = zoneSrv.getByNomZone((String) jComboBoxPanelAgencementZone.getSelectedItem());
                    lecteur = new Lecteur(formattedTextToIp(jFormattedTextFieldPanelAgencementIpLecteur.getText()));
                    if (lecteurSrv.add(lecteur, zone.getIdZone()) != null) {
                        JOptionPane.showMessageDialog(this, "Le lecteur a √©t√© ajout√©.",
                                "Ajout r√©ussi", JOptionPane.INFORMATION_MESSAGE);
                        jFormattedTextFieldPanelAgencementIpLecteur.setText("");
                    } else {
                        JOptionPane.showMessageDialog(this, "Le lecteur n'a pas pu √™tre ajout√©.",
                                "Ajout impossible", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Le lecteur n'a pas pu √™tre ajout√©.",
                            "Ajout impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 7:
                if (jComboBoxPanelAgencementLecteur.getSelectedItem() != null) {
                    lecteur = lecteurSrv.getByIp((String) jComboBoxPanelAgencementLecteur.getSelectedItem());
                    lecteur.setIp(formattedTextToIp(jFormattedTextFieldPanelAgencementIpLecteur.getText()));
                    if (lecteurSrv.update(lecteur)) {
                        JOptionPane.showMessageDialog(this, "Le lecteur a √©t√© mis √† jour.",
                                "Modification r√©ussie", JOptionPane.INFORMATION_MESSAGE);
                        zone = zoneSrv.getByNomZone((String) jComboBoxPanelAgencementZone.getSelectedItem());
                        jComboBoxPanelAgencementLecteur.removeAllItems();
                        for (Lecteur l : zone.getLecteurs()) {
                            jComboBoxPanelAgencementLecteur.addItem(l.getIp());
                        }
                        jComboBoxPanelAgencementLecteur.setSelectedItem(lecteur.getIp());
                    } else {
                        JOptionPane.showMessageDialog(this, "Le lecteur n'a pas pu √™tre modifi√©.",
                                "Modification impossible", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Le lecteur n'a pas pu √™tre modifi√©.",
                            "Modification impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 8:
                if (jComboBoxPanelAgencementLecteur.getSelectedItem() != null) {
                    lecteur = lecteurSrv.getByIp((String) jComboBoxPanelAgencementLecteur.getSelectedItem());
                    if (lecteurSrv.remove(lecteur)) {
                        JOptionPane.showMessageDialog(this, "Le lecteur a √©t√© supprim√©e.",
                                "Suppression r√©ussie", JOptionPane.INFORMATION_MESSAGE);
                        zone = zoneSrv.getByNomZone((String) jComboBoxPanelAgencementZone.getSelectedItem());
                        jComboBoxPanelAgencementLecteur.removeAllItems();
                        for (Lecteur l : zone.getLecteurs()) {
                            jComboBoxPanelAgencementLecteur.addItem(l.getIp());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Le lecteur n'a pas pu √™tre supprim√©e.",
                                "Suppression impossible", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Le lecteur n'a pas pu √™tre supprim√©e.",
                            "Suppression impossible", JOptionPane.ERROR_MESSAGE);
                }
                break;
        }
    }//GEN-LAST:event_jButtonPanelAgencementValiderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupHistorique;
    private javax.swing.ButtonGroup buttonGroupZone;
    private javax.swing.JButton jButtonAjouterPanelBadgeZone;
    private javax.swing.JButton jButtonPanelAgencementValider;
    private javax.swing.JButton jButtonPanelBadgeAjouter;
    private javax.swing.JButton jButtonPanelBadgeModifier;
    private javax.swing.JButton jButtonPanelBadgeObtenirPersonne;
    private javax.swing.JButton jButtonPanelBadgeScannerBadge;
    private javax.swing.JButton jButtonPanelBadgeSupprimer;
    private javax.swing.JButton jButtonPanelHistoriqueScannerBadge;
    private javax.swing.JCheckBox jCheckBoxPanelAgencementZoneSensible;
    private javax.swing.JCheckBox jCheckBoxPanelBadgePassword;
    private javax.swing.JComboBox jComboBoxPanelAgencementBatiment;
    private javax.swing.JComboBox jComboBoxPanelAgencementChoix;
    private javax.swing.JComboBox jComboBoxPanelAgencementLecteur;
    private javax.swing.JComboBox jComboBoxPanelAgencementZone;
    private javax.swing.JComboBox jComboBoxPanelBadgeBatiment;
    private javax.swing.JComboBox jComboBoxPanelBadgeZone;
    private javax.swing.JComboBox jComboBoxPanelHistorique;
    private javax.swing.JFormattedTextField jFormattedTextFieldPanelAgencementFermeture;
    private javax.swing.JFormattedTextField jFormattedTextFieldPanelAgencementIpLecteur;
    private javax.swing.JFormattedTextField jFormattedTextFieldPanelAgencementOuverture;
    private javax.swing.JLabel jLabelPanelAgencementBatiment;
    private javax.swing.JLabel jLabelPanelAgencementFermeture;
    private javax.swing.JLabel jLabelPanelAgencementIpLecteur;
    private javax.swing.JLabel jLabelPanelAgencementLecteur;
    private javax.swing.JLabel jLabelPanelAgencementNomBatiment;
    private javax.swing.JLabel jLabelPanelAgencementNomZone;
    private javax.swing.JLabel jLabelPanelAgencementOuverture;
    private javax.swing.JLabel jLabelPanelAgencementZone;
    private javax.swing.JLabel jLabelPanelAgencementZoneSensible;
    private javax.swing.JLabel jLabelPanelBadgeConfirmation;
    private javax.swing.JLabel jLabelPanelBadgeNom;
    private javax.swing.JLabel jLabelPanelBadgeNumero;
    private javax.swing.JLabel jLabelPanelBadgePassword;
    private javax.swing.JLabel jLabelPanelBadgePrenom;
    private javax.swing.JLabel jLabelPanelBadgeZone;
    private javax.swing.JList jListPanelBadgeZone;
    private javax.swing.JMenu jMenu;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItemBadge;
    private javax.swing.JMenuItem jMenuItemBatiment;
    private javax.swing.JMenuItem jMenuItemHistorique;
    private javax.swing.JPanel jPanelAgencement;
    private javax.swing.JPanel jPanelBadge;
    private javax.swing.JPanel jPanelHistorique;
    private javax.swing.JPasswordField jPasswordFieldPanelBadgeConfirmation;
    private javax.swing.JPasswordField jPasswordFieldPanelBadgePassword;
    private javax.swing.JRadioButton jRadioButtonPanelBadgeAllZone;
    private javax.swing.JRadioButton jRadioButtonPanelBadgeAllZoneByBatiment;
    private javax.swing.JRadioButton jRadioButtonPanelBadgeZoneByBatiment;
    private javax.swing.JRadioButton jRadioButtonPanelHistoriqueBadge;
    private javax.swing.JRadioButton jRadioButtonPanelHistoriqueZone;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneBadge;
    private javax.swing.JSeparator jSeparatorPanelAgencementLecteur;
    private javax.swing.JSeparator jSeparatorPanelAgencementZone;
    private javax.swing.JTable jTablePanelHistorique;
    private javax.swing.JTextField jTextFieldPanelAgencementNomBatiment;
    private javax.swing.JTextField jTextFieldPanelAgencementNomZone;
    private javax.swing.JTextField jTextFieldPanelBadgeNom;
    private javax.swing.JTextField jTextFieldPanelBadgeNumero;
    private javax.swing.JTextField jTextFieldPanelBadgePrenom;
    // End of variables declaration//GEN-END:variables

    private void swtichEnabledButton(boolean bool) {
        jButtonPanelBadgeAjouter.setEnabled(!bool);
        jButtonPanelBadgeModifier.setEnabled(bool);
        jButtonPanelBadgeSupprimer.setEnabled(bool);
        jCheckBoxPanelBadgePassword.setVisible(bool);
        jCheckBoxPanelBadgePassword.setSelected(bool);
    }

    private boolean validatePassword(String str) {
        return str.matches("[0-9]+") && str.length() == 6;
    }

    private boolean validateNumero(String str) {
        return str.matches("[a-zA-Z0-9]+") && str.length() == 8;
    }

    private String formattedTextToHoraire(String ft) {
        String[] tft = ft.split(":");
        int h1 = Integer.parseInt(tft[0]);
        int h2 = Integer.parseInt(tft[1]);
        int h3 = Integer.parseInt(tft[2]);
        if (h1 < 24 && h2 < 60 && h3 < 60) {
            return h1 + ":" + h2 + ":" + h3;
        } else {
            return "";
        }
    }

    private String formattedTextToIp(String ft) {
        String[] tft = ft.split("\\.");
        int ip1 = Integer.parseInt(tft[0]);
        int ip2 = Integer.parseInt(tft[1]);
        int ip3 = Integer.parseInt(tft[2]);
        int ip4 = Integer.parseInt(tft[3]);
        if (ip1 < 256 && ip2 < 256 && ip3 < 256 && ip4 < 256) {
            return ip1 + "." + ip2 + "." + ip3 + "." + ip4;
        } else {
            return "";
        }
    }

    private String ipToFormattedText(String ip) {
        String[] tip = ip.split("\\.");
        for (int i = 0; i < 4; i++) {
            while (tip[i].length() < 3) {
                tip[i] = "0" + tip[i];
            }
        }
        return tip[0] + "." + tip[1] + "." + tip[2] + "." + tip[3];
    }

    private void defaultPanelBadge() {
        jTextFieldPanelBadgeNumero.setText("");
        jTextFieldPanelBadgeNom.setText("");
        jTextFieldPanelBadgePrenom.setText("");
        jPasswordFieldPanelBadgePassword.setText("");
        jPasswordFieldPanelBadgeConfirmation.setText("");
        swtichEnabledButton(false);
        jRadioButtonPanelBadgeZoneByBatiment.setSelected(true);
        jRadioButtonPanelBadgeZoneByBatimentActionPerformed(null);
        ((DefaultListModel) jListPanelBadgeZone.getModel()).removeAllElements();
    }

    private void defaultPanelHistorique() {
        jRadioButtonPanelHistoriqueZone.setSelected(true);
        jRadioButtonPanelHistoriqueZoneActionPerformed(null);
    }

    private void defaultPanelBatiment() {
        jComboBoxPanelAgencementChoix.setSelectedIndex(0);
    }
}
